# banner
    echo '
         /      \ /  | /  | /  | /      \ /       \
         /$$$$$$  |$$ | $$ | $$ |/$$$$$$  |$$$$$$$  |
         $$ |  $$ |$$ | $$ | $$ |$$    $$ |$$ |  $$ |
         $$ \__$$ |$$ \_$$ \_$$ |$$$$$$$$/ $$ |  $$ |
         $$    $$/ $$   $$   $$/ $$       |$$ |  $$ |
          $$$$$$/   $$$$$/$$$$/   $$$$$$$/ $$/   $$/

    '
    echo "--------------------------------"
    echo "-- owen zsh config -------------"
    echo "--------------------------------"

# Just for my own notes / confirmation and to help anybody else, the ultimate order is .zshenv â†? [.zprofile if login] â†? [.zshrc if interactive] â†? [.zlogin if login] â†? [.zlogout sometimes].

# manual config is needed to confirm and add to ~/.zshrc
# local WINHOSTIP=172.30.23.21
# export all_proxy="socks5://$WINHOSTIP:10808"
# export DISPLAY="$WINHOSTIP:0.0"
# export WINUSERNAME=zhuangyulin

# -- owen configs -----------------------------------------------------------
## mark for inited to avoid source twice in bootstrap.sh
echo 'sourcing owen zsh'
## setopt
setopt BSD_echo   # for fix wired "echo ////" problem

# -- owen zplug manage plug -----------------------------------------------
    ## oh-my-zsh plugins # Supports oh-my-zsh plugins and the like
    ## config plugin
    if [[ -f ~/.zplug/init.zsh ]] {
      source ~/.zplug/init.zsh

      # oh-my-zsh inner option plugins
      zplug "plugins/git",   from:oh-my-zsh
      zplug "plugins/z",   from:oh-my-zsh
      zplug "plugins/rand-quote",   from:oh-my-zsh
      zplug "plugins/themes",   from:oh-my-zsh
      zplug "plugins/gitignore",   from:oh-my-zsh
      zplug "plugins/cp",   from:oh-my-zsh
      zplug "plugins/extract",   from:oh-my-zsh
      zplug "plugins/zsh_reload",   from:oh-my-zsh
      zplug "plugins/safe-paste",   from:oh-my-zsh
      zplug "plugins/colored-man-pages",   from:oh-my-zsh
    # zplug "plugins/vi-mode",   from:oh-my-zsh
    # zplug "plugins/zsh-vim-mode",   from:oh-my-zsh
      zplug "plugins/history-substring-search",   from:oh-my-zsh

      # config plugs
      zplug "zsh-users/zsh-syntax-highlighting"
      zplug "zsh-users/zsh-autosuggestions"
      zplug "supercrabtree/k"
      zplug "denisidoro/navi"
      zplug "MichaelAquilina/zsh-you-should-use"
      zplug "changyuheng/zsh-interactive-cd"
      zplug "SleepyBag/zsh-confer"

    # zplug "Powerlevel9k/powerlevel9k", from:github, as:theme, if:"[[ $ZSH_THEME_STYLE == 9k ]]"
    # zplug "denysdovhan/spaceship-prompt", use:spaceship.zsh-theme, from:github, as:theme, if:"[[ $ZSH_THEME_STYLE == spaceship ]]"
    # zplug "caiogondim/bullet-train.zsh", use:bullet-train.zsh-theme, from:github, as:theme, if:"[[ $ZSH_THEME_STYLE == bullet ]]"
    # zplug "skylerlee/zeta-zsh-theme", from:github, as:theme, if:"[[ $ZSH_THEME_STYLE == zeta ]]"

      # Install plugins if there are plugins that have not been installed
      if ! zplug check --verbose; then
          printf "Install? [y/N]: "
          if read -q; then
              echo; zplug install
          fi
      fi
      # Then, source plugins and add commands to $PATH
      zplug load
    } else {
        echo "Do not install zplug, please install!"
        echo "# curl -sL --proto-redir -all,https https://raw.githubusercontent.com/zplug/installer/master/installer.zsh | zsh"
    }

    ## after plug loaded
    ## zsh-autosuggestions - note the source command must be at the end of .zshrc
    source "$ZPLUG_REPOS/zsh-users/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh"

# ---------------------------------------------------------
# -- owen aliases -----------------------------------------
# ---------------------------------------------------------

## general alias
    alias \
        pc="proxychains" \
        vi="vim" \
        ra="ranger" \
        lz="lazygit" \
        rp=realpath \
        nb="newsboat -ru ~/.local/etc/newsboat/rss_links.txt" \
        fd=fdfind \
        pg="grep -P" \
        ap='apropos' \
        wt='curl wttr.in/~Fu+Zhou+Fujian | less' \
        pac="vim ~/.local/etc/pac.txt" \
        ty="/mnt/c/Program\ Files/Typora/Typora.exe" \

# Verbosity and settings that you pretty much just always are going to want.
    alias \
    cp='cp -iv' \
    rm='rm -vI' \
    mkd="mkdir -pv" \

    ## git alias - ref - liaoxuefeng
        git config --global alias.st status
        git config --global alias.co checkout
        git config --global alias.ci commit
        git config --global alias.br branch
        git config --global alias.lg "log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit"
        git config --global color.ui true
        alias gla='git log --oneline --decorate --all --graph'

    ## zsh config
        alias zshc="vim ~/.zshrc"
        alias zshs="source ~/.zshrc"

## tmux
    alias \
    ta='tmux a' \
    tn='tmux new -t' \
    tk='tmux kill-session -t' \
    tls='tmux ls' \
    tat='tmux a -t' \
    tmuxc='vim ~/.tmux.conf' \
    tmuxs='tmux source ~/.tmux.conf' \

EDITOR=vim   # for hjkl move

## vim
    alias vic='vim ~/.vimrc'

echocomma () {
    echo -n ","
}
zle -N echocomma

# -- owen terminal keymap --------------------------------------------
    ## ref - https://www.zhihu.com/question/49284484
    bindkey '^P' history-substring-search-up
    bindkey '^N' history-substring-search-down
    bindkey ',' autosuggest-accept
    bindkey ',' echocomma


# tmux config in fzf way
    # https://github.com/junegunn/fzf/wiki/examples#tmux
    # it does not well done, because mask the auto-complete in the dafault shell
    # zsh; needs setopt re_match_pcre. You can, of course, adapt it to your own shell easily.
    function tmk () {
        local sessions
        sessions="$(tmux ls|fzf --exit-0 --multi)"  || return $?
        local i
        for i in "${(f@)sessions}"
        do
            [[ $i =~ '([^:]*):.*' ]] && {
                echo "Killing $match[1]"
                tmux kill-session -t "$match[1]"
            }
        done
    }

    # tm - create new tmux session, or switch to existing one. Works from within tmux too. (@bag-man)
    # `tm` will allow you to select your tmux session via fzf.
    # `tm irc` will attach to the irc session (if it exists), else it will create it.
    function tm() {
      [[ -n "$TMUX" ]] && change="switch-client" || change="attach-session"
      if [ $1 ]; then
        tmux $change -t "$1" 2>/dev/null || (tmux new-session -d -s $1 && tmux $change -t "$1"); return
      fi
      session=$(tmux list-sessions -F "#{session_name}" 2>/dev/null | fzf --exit-0) &&  tmux $change -t "$session" || echo "No sessions found."
    }

# wsl config
    ## Fix xclip, so we can copy between win10 and linux. Xclip bases on x11 on linux
    ## and xserver on win10.
    ## To make xclip works on vim, we also need install vim-gtk
    result=$(uname -r | grep -i "microsof" | wc -l)
    if [ $result -eq 1 ]
    then
        echo "we are in wsl~~~"
        # initrc
        explorer.exe "D:\.local\win10\keyremap.ahk"
        # export DISPLAY="127.0.0.1:0"
        alias \
            cmd="cmd.exe /C start " \
            exp="explorer.exe" \
            code='/mnt/c/Users/$WINUSERNAME/AppData/Local/Programs/Microsoft\ VS\ Code/bin/code' \
            wpwd="wslpath -w $(pwd)" \
            wp=wslpath \
            wpw="wslpath -w" \
            psh="/mnt/c/Windows/System32/WindowsPowerShell/v1.0/powerShell.exe"

        # function - manipulate win10 droplist(win10 clipboard)
            function yw() {
                yw_array=()
                for var in "$@"
                do
                    tmppath=$(wslpath -wa $var)
                    yw_array+=("$tmppath")
                done
                psh -File 'D:\.local\win10\file2clip.ps1' "$yw_array[@]"
            }
            function yww() {
                yw_array=()
                for var in "$@"
                do
                    tmppath=$(wslpath -wa $var)
                    yw_array+=("$tmppath")
                done
                psh -File 'D:\.local\win10\file2clip.ps1' "$yw_array[@]"
            }
            function ywa() {
                yw_array=()
                for var in "$@"
                do
                    tmppath=$(wslpath -wa $var)
                    yw_array+=("$tmppath")
                done
                psh -File 'D:\.local\win10\file2clip-append.ps1' "$yw_array[@]"
            }
            function pw() {
                if [ -z $1 ]
                then
                    DesDirPath='.'
                else
                    DesDirPath="$1"
                fi
                DesDirPath=$(wslpath -wa $DesDirPath)
                psh -File 'D:\.local\win10\clip2file.ps1' "$DesDirPath"
            }
            function pww() {
                if [ -z $1 ]
                then
                    DesDirPath='.'
                else
                    DesDirPath="$1"
                fi
                DesDirPath=$(wslpath -wa $DesDirPath)
                psh -File 'D:\.local\win10\clip2file.ps1' "$DesDirPath"
            }
            function pwm() {
                if [ -z $1 ]
                then
                    DesDirPath='.'
                else
                    DesDirPath="$1"
                fi
                DesDirPath=$(wslpath -wa $DesDirPath)
                psh -File 'D:\.local\win10\mv-clip2file.ps1' "$DesDirPath"
            }
            function pwl() {
                if [ -z $1 ]
                then
                    DesDirPath='.'
                    # echo '$1 is null'
                else
                    DesDirPath="$1"
                fi
                DesDirPath=$(wslpath -wa $DesDirPath)
                psh -File 'D:\.local\win10\set-shortcut-from-clipboard.ps1' "$DesDirPath"
            }
            function musb {
                sudo mkdir /mnt/$1
                sudo mount -t drvfs $1: /mnt/$1
            }
            function wcd() {
                local tmppath=\'$*\'
                echo $tmppath
                cd $(wslpath "$*")
            }
    fi

# for use "vim {a-c}file.c
    setopt braceccl

# start v2ray service
# sudo systemctl enable v2ray # service v2ray status

# we must add the following in ~/.zshrc
# export all_proxy="socks5://192.168.0.105:10808"
# export all_proxy="socks5://172.30.23.21:10808"

############
# nnoremap & :&&
# xnoremap & :&&

# fzf - https://github.com/junegunn/fzf#using-git
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh
